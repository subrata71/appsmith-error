{
  "pluginType": "DB",
  "pluginId": "redshift-plugin",
  "unpublishedAction": {
    "name": "getTransactionTable",
    "datasource": {
      "name": "junoDataWarehouse",
      "pluginId": "redshift-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "id": "junoDataWarehouse",
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Transactions",
    "actionConfiguration": {
      "timeoutInMillisecond": 90000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "select\nt._id,\nt.note as note,\nt.synapse_from.user.legal_names[0]::varchar as from_name,\nt.synapse_to.user.legal_names[0]::varchar as to_name,\ncoalesce(amount,crypto_transaction_info.predicted_fiat_amount) as amount,\nt.crypto_transaction_info.predicted_amount.amount as crypto_units,\nt.crypto_transaction_info.currency as currency,\ncase when t.side = 2 and t.transaction_type.name = 'crypto_transaction' then 'Crypto deposit'\nwhen t.side = 1 and t.transaction_type.name = 'crypto_transaction' then 'Crypto send'\nwhen t.side = 2 and t.transaction_type.name = 'crypto_trade' then 'Crypto Sell'\nwhen t.side = 1 and t.transaction_type.name = 'crypto_trade' then 'Crypto Buy'\nwhen t.side = 1 and t.transaction_type.name = 'card_purchase' then 'Card spend'\nwhen t.side = 1 and t.transaction_type.name not in ('card_purchase', 'crypto_transaction', 'crypto_trade') then 'Cash Withdrawal'\nend as transaction_type,\nCASE \n    WHEN t.transaction_type.name = 'external_transfer' AND t.from.type = 'ACH' AND is_dd = 1 THEN  'dd'\n    WHEN t.transaction_type.name = 'external_transfer' AND t.from.type = 'ACH' AND is_dd = 2 THEN 'External_ACH'\n    WHEN t.transaction_type.name = 'external_transfer' AND t.from.type = 'WIRE' THEN 'WIRE'\n    WHEN t.synapse_from.meta.merchant_name = 'Cash App' THEN 'Cash_App'\n    WHEN t.synapse_from.meta.merchant_name = 'Apple Cash' THEN 'Apple_Cash'\n    WHEN t.synapse_from.meta.merchant_name = 'Paypal' THEN 'Paypal'\n    WHEN t.synapse_from.meta.merchant_name = 'Venmo' THEN 'Venmo'\n    WHEN t.synapse_from.meta.merchant_name = 'Zelle' THEN 'Zelle' end\nas Method,\nt.status.title::varchar as status,\nt.added_on as Date\nfrom\n(select _id as user_id, email as email from mongo_api_user where 1=1 and email = '{{ lib.getPersonalDetails().email }}') u \nleft join mongo_api_transaction t ON t.user_id = u.user_id\nwhere t.transaction_type.code not in (35,36)\n{{\n(synapseTransactionId.text.length == 24 ? \"AND t.synapse_transaction_id = '\"+ synapseTransactionId.text +\"'\": '')\n}}\n{{\n(junoTransactionId.text.length == 24 ? \"AND t._id = '\"+ junoTransactionId.text +\"'\": '')\n}}\norder by date desc\t",
      "selfReferencingDataPaths": []
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [
      "'Query timeout' field must be an integer between 0 and 60000"
    ],
    "messages": [],
    "jsonPathKeys": [
      "\n(junoTransactionId.text.length == 24 ? \"AND t._id = '\"+ junoTransactionId.text +\"'\": '')\n",
      "\n(synapseTransactionId.text.length == 24 ? \"AND t.synapse_transaction_id = '\"+ synapseTransactionId.text +\"'\": '')\n",
      " lib.getPersonalDetails().email "
    ],
    "userSetOnLoad": true,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": [],
    "createdAt": "2023-09-20T07:28:05Z"
  },
  "id": "Transactions_getTransactionTable",
  "deleted": false,
  "gitSyncId": "650332f06e58595db41e70df_650a9f056e58595db41e7295"
}