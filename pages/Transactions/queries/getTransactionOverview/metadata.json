{
  "pluginType": "DB",
  "pluginId": "redshift-plugin",
  "unpublishedAction": {
    "name": "getTransactionOverview",
    "datasource": {
      "name": "junoDataWarehouse",
      "pluginId": "redshift-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "id": "junoDataWarehouse",
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Transactions",
    "actionConfiguration": {
      "timeoutInMillisecond": 90000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "SELECT\n    total_volume,\n    total_txn_count,\n    cancelled_txn_amount,\n    cancelled_txn_count,\n    returned_txn_amount,\n    returned_txn_count,\n    cash_deposits,\n    cash_deposits_count,\n    dd_amount,\n    cashback_amount,\n    cashback_txn_count,\n    crypto_withdrawal_amount,\n\t\tcard_purchase_amount,\n\t\tdisputed_txn_count,\n\t\tcard_purchase_txn_count\nFROM\n    (SELECT _id AS user_id,email FROM mongo_api_user WHERE 1=1 AND email='{{ lib.getPersonalDetails().email }}') u\nLEFT JOIN\n    (SELECT user_id, \n     SUM(CASE WHEN transaction_type.code not in (35,36) and status.code=4 then COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float else 0 end) AS total_volume,\n     SUM(CASE WHEN status.code=5\n          THEN (COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float) \n          ELSE 0 \n      END) AS cancelled_txn_amount,\n      sum(CASE WHEN status.code=4 and transaction_type.code not in (35,36)\n          THEN 1\n          ELSE 0 \n      END) AS total_txn_count,\n      sum(CASE WHEN status.code=5\n          THEN 1\n          ELSE 0 \n      END) AS cancelled_txn_count,\n       SUM(CASE WHEN status.code=6\n          THEN (COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float) \n          ELSE 0 \n      END) AS returned_txn_amount,\n      sum(CASE WHEN status.code=6\n          THEN 1\n          ELSE 0 \n      END) AS returned_txn_count,\n       SUM(CASE WHEN status.code=4 and side = 2 AND\n              transaction_type.name IN (\n                'external_transfer',\n                'added_money_via_card_astra',\n                'added_money',\n                'added_money_via_card',\n                'check_deposit'\n                ) \n          THEN (COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float) \n          ELSE 0 \n      END) AS cash_deposits,\n      SUM(CASE WHEN status.code=4 and side = 2 AND\n              transaction_type.name IN (\n                'external_transfer',\n                'added_money_via_card_astra',\n                'added_money',\n                'added_money_via_card',\n                'check_deposit'\n                ) \n          THEN 1\n          ELSE 0 \n      END) AS cash_deposits_count,\n      \n  SUM(CASE WHEN status.code=4 and transaction_type.name IN ('card_purchase') \n          THEN (COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float) \n          ELSE 0 \n      END) AS card_purchase_amount,\n  SUM(CASE WHEN status.code=4 and transaction_type.name IN ('card_purchase') \n          THEN 1\n          ELSE 0 \n      END) AS card_purchase_txn_count,\n SUM(CASE WHEN status.code=4 and transaction_type.name IN ('cashback') \n          THEN 1\n          ELSE 0 \n      END) AS cashback_txn_count,\n  SUM(CASE WHEN status.code=4 and is_dd=1\n          THEN (COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float) \n          ELSE 0 \n      END) AS dd_amount,\n  SUM(CASE WHEN status.code=4 and transaction_type.name IN ('cashback') \n          THEN (COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float) \n          ELSE 0 \n      END) AS cashback_amount,\n       SUM(CASE WHEN status.code=4 and transaction_type.name IN ('crypto_transaction') and side=1 \n          THEN (COALESCE(amount, crypto_transaction_info.predicted_fiat_amount)::float) \n          ELSE 0 \n      END) AS crypto_withdrawal_amount,\n      sum(CASE WHEN status.code=4 and synapse_extra.other.disputed = true\n          THEN 1\n          ELSE 0 \n      END) AS disputed_txn_count\n     FROM mongo_api_transaction\n     GROUP BY user_id) t\nON\n    t.user_id = u.user_id;",
      "selfReferencingDataPaths": []
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [
      "'Query timeout' field must be an integer between 0 and 60000"
    ],
    "messages": [],
    "jsonPathKeys": [
      " lib.getPersonalDetails().email "
    ],
    "userSetOnLoad": true,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": [],
    "createdAt": "2023-09-20T07:21:17Z"
  },
  "id": "Transactions_getTransactionOverview",
  "deleted": false,
  "gitSyncId": "650332f06e58595db41e70df_650a9d6d6e58595db41e728e"
}